CorePowerYoges
	CorePowerYoges.Models
		State
			string Abbreviation
			string Name
			
			Location
				string Id
				string Name
				
				Session
					DateTime StartTime
					DateTime EndTime
					string Name
					string Teacher
					string StartTimeLabel
					string EndTimeLabel
					string DurationLabel
					string TimeLabel
		
		
		DailySchedule (utility model for external apps)
		DailyScheduleSummary (utility)

	CorePowerYoges.BLL
		our business logic layer
		calls into DAL for states, locations, and schedules
		
		List<State> GetAllStates();
		List<State> GetAllStatesWithLocations();
		State GetStateByAbbreviation(string abbreviation);
		
		List<Locations> GetAllLocationsByState(string abbreviation);
		Location GetLocationById(string id);
		
		DailyScheduleSummary GetDailyScheduleSummaryByLocationId(string locationId, datetime date);

		GetDailyScheduleByLocationId(string locationId, datetime date);
	CorePowerYoges.Repository
		StateRepository
			GetAllStates
	CorePowerYoges.DAL (literally our data access layer, interacts with the file system)
		acts as a data access layer, exposing a repository that talks to the underlying json files?
		states and locations
		caches xml files until the file changes
				
		talks to the scraper when necessary to get schedules
		caches schedules for 18 hours
	CorePowerYoges.Scraper
		scrapes the core power yoga website for daily schedules

		/// gets one or many daily schedules, which is made up of a list of sessions, for a given date
		List<DailySchedule> GetDailyScheduleByLocations(DateTime date, Location location)
		List<DailySchedule> GetDailyScheduleByLocations(DateTime date, List<Location> locations)
		
	CorePowerYoges.WebApi
		acts as the service layer for any external applications
		this should talk to the BLL


app will feature landing page with list of users favorites
	favorites is a list of locations with a summary
		for example:

			
		you can have a maximum of 20 favorites?
		favorites will be loaded from local storage on phone
			if no favorites are set, a message to add favorites should be shown
		to retrieve favorites summary, a call to GetLocationSummaryByIds(string[] ids)

		when you click on a location you'll get a pivot with the days of the week
			the user should be placed on whatever day of the week it is
				to retrieve today's schedule make a call to GetDailyScheduleSummary

				if the user swipes to tomorrow, data should be loaded on demand
					(we can add the other days of the week with a later release)

if you swipe to the right you'll get a list of locations
	this page will have a list of states, this can be a long list picker (get all states with locations) or dropdown
		when you click a state you'll be taken to a list of locations, this can be a long list picker
			this list will allow you to add a location to your favorites via some sort of heart button

			ok, so we need a list of states with locations, where do we get it? the DA
			



MasterLocationList
	is a list of States with their respective Locations


